apply plugin: 'maven-publish'
apply plugin: 'signing'

def GROUP_ID = 'io.github.fans008'//改成第一步申请上传权限时填写的Group Id
def ARTIFACT_ID = 'fansLib' //随意命名 你自己编写的第三方库的名称
def VERSION_NAME = '1.0.0' //版本
def DESCRIPTION = 'BaseFansLib'
def GIT_LOCATION = 'github.com/fans008/Example.git' //github项目的链接
def GIT_LOCATION_URL = 'https://' + GIT_LOCATION

//仓库地址
def MAVEN_URL = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
def SNAPSHOTS_REPO_URL  = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
def nexusUsername = 'ftt' //Sonatype账号
def nexusPassword = 'Fan..3939539'//Sonatype账号密码
def nexusEmail = '920563087@qq.com'//Sonatype邮箱

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source

    exclude "**/R.class"  //排除`R.class`
    exclude "**/BuildConfig.class"  //排除`BuildConfig.class`
}

//--- 修改配置一 ---
ext {path=
        PUBLISH_GROUP_ID = GROUP_ID
    PUBLISH_ARTIFACT_ID = ARTIFACT_ID
    PUBLISH_VERSION = VERSION_NAME
}

//--- 修改配置二 ---
ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

File secretPropsFile = project.rootProject.file('gradle.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}
publishing {
    publications {
        release(MavenPublication) {
            println("publish-maven Log-------> PUBLISH_GROUP_ID: $PUBLISH_GROUP_ID; PUBLISH_ARTIFACT_ID: $PUBLISH_ARTIFACT_ID; PUBLISH_VERSION: $PUBLISH_VERSION")
            // The coordinates of the library, being set from variables that
            // we'll set up in a moment

            //配置一传入的参数
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION

            // Two artifacts, the `aar` and the sources
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidSourcesJar

            // Self-explanatory metadata for the most part
            pom {
                //--- 修改配置三 ---
                name = PUBLISH_ARTIFACT_ID
                description = '上传aar插件至mavencentral，方便使用implementation快速引入' //添加文件描述
                // If your project has a dedicated site, use its URL here
                url = GIT_LOCATION_URL //项目github链接
                licenses {
                    license {
                        //协议类型，一般默认Apache License2.0的话不用改：
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        //--- 修改配置四 ---
                        id = nexusUsername     //你的sonatype用户ID
                        name = nexusUsername   //你的sonatype用户名
                        email = nexusEmail    //你的sonatype注册邮箱
                    }
                }
                // Version control info, if you're using GitHub, follow the format as seen here
                scm {
                    //--- 修改配置五 ---
                    //修改成你的Git地址：
                    connection = 'scm:git:' + GIT_LOCATION + '.git'
                    developerConnection = 'scm:git:ssh://' + GIT_LOCATION + '.git'
                    url = GIT_LOCATION_URL
                    //分支地址：
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        // The repository to publish to, Sonatype/MavenCentral
        maven {
            // This is an arbitrary name, you may also use "mavencentral" or
            // any other name that's descriptive for you

            //--- 修改配置六 ---
            name = DESCRIPTION
            def releasesRepoUrl = MAVEN_URL
            def snapshotsRepoUrl = SNAPSHOTS_REPO_URL
            // You only need this if you want to publish snapshots, otherwise just set the URL
            // to the release repo directly
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            // The username and password we've fetched earlier
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}
signing {
    sign publishing.publications
}

